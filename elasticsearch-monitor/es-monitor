#!/usr/bin/env python
# encoding: utf-8

"""
Author: Ligh
Mail: xiaohui920@sina.cn
File: es-monitor.py
Created Time: 11/13/18 16:41
"""

from __future__ import print_function

import json
import re
import os
import sys
import time
from traceback import print_exc
import socket
import requests

from conf.settings import (
    traps1,
    traps2,
    GAUGE,
    COUNTER,
    CONFIG_FILE,
)

from utils.common import load_yaml_data

"""
    The ElasticSearch-agent collects state information by
    calling the ElasticSearch API and sends it to open-falcon.
"""


def load_falcon_conf(filename=None):
    data = load_yaml_data(filename)
    url = data['falcon']['push_url']
    return url


def es_data(endpoint, metric, timestamp, value, counter_type, tags):
    structure = {
        'endpoint': endpoint,
        'metric': metric,
        'timestamp': timestamp,
        'step': 60,
        'value': value,
        'counterType': counter_type,
        'tags': tags
    }
    return structure


# read specified keys from json data
def get_keys(stats, traps, ts, HOSTNAME, cluster_name):
    stats_data_gauge = {}
    stats_data_timer = {}
    tags = "cluster_name = %s" % cluster_name
    falcon_data = []

    for key in traps:
        if key == 'status':
            value = stats.get(key, '')
            if value == 'green':
                stats[key] = 1
            elif value == 'yellow':
                stats[key] = 2
            elif value == 'red':
                stats[key] = 0

        c = key.split('.')
        s = stats
        while len(c):
            s = s.get(c.pop(0), {})

        if s == {}:
            continue

        metric = 'es.' + key
        if key in GAUGE:
            falcon_data.append(es_data(HOSTNAME, metric, ts, s, 'GAUGE', tags))
        elif key in COUNTER:
            falcon_data.append(es_data(HOSTNAME, metric, ts, s, 'COUNTER', tags))

    return falcon_data


def send_to_falcon(url=None, data=None):
    if data and url:
        res = requests.post(url, data=json.dumps(data))
        return res


def indices_total(data=None):
    indices = {}
    if data:
        indices['indices_total'] = data['indices']['count']
    return indices


def health_result(ip, port):
    res = requests.get("http://{ip}:{port}/_cluster/health".format(ip=ip, port=port), timeout=10)
    health = res.json()
    return health


def node_result(ip, port):
    res = requests.get("http://{ip}:{port}/_nodes/stats".format(ip=ip, port=port), timeout=10)
    node = res.json()
    return node


def indices_result(ip, port):
    res = requests.get("http://{ip}:{port}/_cluster/stats".format(ip=ip, port=port),
                       timeout=10)
    indices = res.json()
    return indices

def check_result(ip, port):
    res = requests.get("http://{ip}:{port}".format(ip=ip, port=port),
                       timeout=10)
    indices = res.status_code
    return indices


def judge_role():
    data = load_yaml_data(CONFIG_FILE)
    return data['es-clusters']

def main(data_time):
    node = {}
    if_ip = re.compile('^((25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(25[0-5]|2[0-4]\d|[01]?\d\d?)$')
    indices = {}
    falcon_data = []
    # load json data
    cluster_list = judge_role()
    for i in cluster_list:
        PORT = i['PORT'] 
        ONE_HOST = i['One_host']
        BACK_HOST = i['Back_host']
        if check_result(ONE_HOST,PORT) == 200 :
            HOSTNAME=ONE_HOST
        elif check_result(BACK_HOST,PORT) == 200 :
            HOSTNAME=BACK_HOST
        else:
            print ("this %s and %s not fount!!!` \n") % (ONE_HOST, BACK_HOST)
            
        IP = socket.gethostbyname(HOSTNAME)
        cluster_name = i['cluster_name'] 
        try:
            data_time = data_time
            health = health_result(IP, PORT)
            # only the master to obtains health values
            falcon_data = get_keys(health, traps1, data_time, HOSTNAME, cluster_name)
            node_stats = node_result(IP, PORT)

            # only for current node
            for node_id in node_stats.get('nodes', {}).keys():
                #if node_stats['nodes'][node_id]['host'].startswith(IP):
                ip_addr = node_stats['nodes'][node_id]['host']
                if if_ip.match(ip_addr):
                    HOSTNAME = socket.gethostbyaddr(ip_addr)[0].split('.')[0]
                    node = node_stats['nodes'][node_id]
                    falcon_data2 = get_keys(node, traps2, data_time, HOSTNAME, cluster_name)
                    falcon_data.extend(falcon_data2)
            try:
                # send metrics to open-falcon
                url = load_falcon_conf(CONFIG_FILE)
                send_to_falcon(url, falcon_data)
            except Exception as e:
                print_exc()


        except (requests.exceptions.ConnectTimeout,
                requests.exceptions.ReadTimeout,
                ) as e:
            print_exc()
            sys.exit(1)

        except Exception as e:
            print_exc()
            sys.exit(1)



if __name__ == "__main__":
    main(int(time.time()))
